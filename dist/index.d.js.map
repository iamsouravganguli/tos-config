{
  "version": 3,
  "sources": ["../index.d.ts"],
  "sourcesContent": ["import mongoose from \"mongoose\";\r\n\r\nexport interface QueryProps<T> {\r\n    onError?: (error) => void;\r\n    onSuccess?: (result: T) => void;\r\n    onNotFound?: () => void;\r\n}\r\n\r\nexport interface RunProps<T> {\r\n    modelKey: mongoose.Model<any>;\r\n    queryFn: (model: mongoose.Model<any>) => Promise<T>;\r\n    onError?: (error) => void;\r\n    onSuccess?: (result: T) => void;\r\n    onNotFound?: () => void;\r\n}\r\n\r\nexport interface CatchErrorProps {\r\n    onError?: (error: ((error) => void) | undefined) => void;\r\n}\r\n\r\nexport declare class Query<T> {\r\n    private global?: QueryProps<T>;\r\n    private mongoose?: typeof mongoose;\r\n\r\n    constructor(props?: QueryProps<T>);\r\n\r\n    public run(props: RunProps<T>): Promise<void>;\r\n\r\n    public catchError(props: CatchErrorProps): void;\r\n\r\n    public connect(dbUri?: string, dbName?: string): Promise<void>;\r\n\r\n    public disconnect(): Promise<void>;\r\n}\r\nexport type ResponseProps = string | null | undefined;\r\n\r\n// Define the ResponseServices class\r\nexport declare class ResponseServices {\r\n    private readonly props: ResponseProps;\r\n\r\n    constructor(text?: ResponseProps | null);\r\n\r\n    handler: (\r\n        services: (req: Request, res: Response) => Promise<any>\r\n    ) => (req: Request, res: Response, next: NextFunction) => Promise<void>;\r\n\r\n    error: (response: Response, error: Error) => Response;\r\n\r\n    success: (\r\n        response: Response,\r\n        type: \"create\" | \"update\" | \"delete\" | \"all\" | \"detail\" | \"other\",\r\n        data?: any,\r\n        message?: string\r\n    ) => Response;\r\n}"],
  "mappings": ";;;;;;;;;;;;;;AAAA;AAAA;",
  "names": []
}
